#+title: Tiebreaking Strategies for A* Search: How to Explore the
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg

#+BEGIN_outline-text-1

#+BEGIN_CENTER
[[png:final-frontier]]
#+END_CENTER

#+BEGIN_CENTER
_Masataro Asai_, Alex Fukunaga

University of Tokyo

Presented in JSAI-16, Jun 6, 2016

Presented in AAAI-16, Feb 15 2016
#+END_CENTER

#+BEGIN_RESUME
さてこんにちは、東京大学の浅井と申します。
今日は教科書にも載っていて誰でも知っているはずのグラフ探索手法、A*アルゴリズムの改良についてお話します。
#+END_RESUME
#+END_outline-text-1

* 先に結果: /A*の性能をタイブレーキングを変えるだけで改善!!/

#+BEGIN_CENTER
1724問中、2GBメモリ制限で30分以内に解けた問題の数
#+END_CENTER

|                         | <c>                           | <c>           |
|                         | Fast Downward (2006〜)        | 提案手法      |
| 問題セット              | State-of-the-Art 探索システム |               |
|-------------------------+-------------------------------+---------------|
| IPC^1 Instances (1104)  | 558                           | *573*         |
| Zerocost Instances(680) | 256                           | *294*         |
|-------------------------+-------------------------------+---------------|
| 合計 (1724)             | 814                           | *867* ( + 53) |
|-------------------------+-------------------------------+---------------|

IPC^1 : International Planning Competition で使われる 高次元グラフ探索ベンチマーク

(35種類の問題集)×(20〜50問)

それぞれの問題集は全く異なる性質の *最適化問題をモデル化*

*問題番号が進むと 指数的に難しくなる*

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
*53問 多く解ける = スゴイ速い*
#+END_LARGER
#+END_ALIGNRIGHT

#+BEGIN_RESUME
先に結果を話します。やったことは、State-of-the-Artを改善したということです。
コンペティションで用いられる高次元グラフ探索のベンチマーク1724問中、
4GBメモリ制限で5分以内に解けた問題の数を比べます。
ベンチマークは35種類の問題集からなり、それぞれの問題集は20から50問の問題からなります。
それぞれの問題集は全く異なる性質の *最適化問題をモデル化* しています。
また、 *問題番号が進むと 指数的に難しくなる* 性質があります。
従って、53問 多く解けるということは一言で言えば スゴイ速い ということです。

まあこれだとちょっと飛ばしすぎましたので、よりバックグラウンドについて丁寧にお話をします。
#+END_RESUME

* 今回の話題 : グラフの最短経路探索

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN7

[[png:graphsearch]]
#+END_SPAN7
#+BEGIN_SPAN5

#+BEGIN_LARGER
#+BEGIN_CENTER
*初期ノード* から

*ゴールノード* への

*最短経路探索*
#+END_CENTER
#+END_LARGER

#+END_SPAN5
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_RESUME
今回の話題はグラフの最短経路探索です。
目標は、グラフをたどっていって辺のコストの和が最小になるような経路を探すこと。
経路を見つけることと、見つけた経路が最小である証明を同時に行う必要があります。
#+END_RESUME

* A* で最短経路探索 ?

[[png:astar]]

#+BEGIN_RESUME
最短経路探索アルゴリズムのうち最も主流の手法はA*です。
A*では、ノードは主に3つの値を持ちます。
g値はそのノードまで現在見つかっている最小経路。
h値はヒューリスティック関数の計算結果であり、現在からゴールまでの距離の下界値で、
最短経路探索では許容的である必要があります。
この2つの和fは、最短経路のコストのに対する下界になっています。

実際の最短コストがf*だとすると、
経路の最短性を保証するために、
A* は f* よりもf値が小さい全てのノードを展開する必要があります。
調べ残しを許さないために、A*は現在キューに入っているノードを小さい順に調べます。

しかし、この説明はA*の大切なある側面を見落としています。
#+END_RESUME

* A* で最短経路探索 ただしタイブレーキング無視!

[[png:astar-emph]]

#+BEGIN_RESUME
The aspect is the tiebreaking strategy. What happens when more than 2 nodes
have the same f-minimum? In such cases, a tiebreaking strategy should select which node to expand.
#+END_RESUME

* タイブレーキングに関する「常識」

#+BEGIN_CENTER
*同じ /f_{min}/ なノードが複数あったときどうする?*
#+END_CENTER

|----------------------------------+------------------------------------|
| *太古の昔*                       |                                    |
| /1968 Hart, Nilsson and Raphael/ | */h/-based tiebreaking* [ /h/ ] :  |
| (*/最初のA*の論文/*)             | 　　 -- h値が小さなものを選択      |
|                                  |                                    |
| /1985ごろにはすでに有名/         | *LIFO tiebreaking* [LIFO] :        |
|                                  | 　　 -- 最後に生成したノードを選択 |
|----------------------------------+------------------------------------|
| *最近は...*                      |                                    |
| /2007 Hansen and Zhou/           | [ /h/ ] "が一番うまく行くと        |
|                                  | 　　　　　　一般的に知られている"  |
| /2010 Holte/                     | [ /h/ ] "がよく使われる"           |
|----------------------------------+------------------------------------|

#+BEGIN_ALIGNRIGHT
*「常識」= [ /h/ ] タイブレーキングだが、それって迷信では??*
#+END_ALIGNRIGHT

#+BEGIN_RESUME
There are several conventional wisdoms on the tiebreaking of A*.

In the earliest work, 
the original paper on A* by Hart, Nilsson and Raphael
proposed a strategy of selecting the nodes with the least h value.
We call this tiebreaking as h-based tiebreaking, and use the notation surrounded by brackets.

Another important method is LIFO tiebreaking, which expands a node in most-recently-generated-first.
It seems to be common already in 1985.

In recent years, we rarely find a detailed description on tiebreaking.
It is sometimes said: it's known to perform well or it's common.
There are sometimes no mention at all.

Overall, it seems that the current rule-of-thumb is to use h-based tiebreaking.
#+END_RESUME

* そもそも [ /h/ ] だけではちゃんとタイブレークできない

/*f*/ も /*h*/ も同じノードが複数あったらどうするのか?

→ *二段階のタイブレーク法 /X/ が必要*  : 配列表記して [ /h/ , */X/* ]

(例) *[* /*h*/ , */LIFO/ ]* を使うA*の動作とは?

+ 常に /*f_{min}*/ なノードを選ぶ。
+ *ただし* 複数ノードが /*f_{min}*/ なら, /*h_{min}*/ のノードを選ぶ (第一段階).
+ *まだ* 複数のノードがあるなら, LIFOに従い最後に生成したノードを選ぶ (第二段階).
  #+BEGIN_ALIGNRIGHT
  #+BEGIN_SMALLER
  ( LIFO キューは常に1つのノードを返すのでコレ以上は必要ない )
  #+END_SMALLER
  #+END_ALIGNRIGHT

|---------------------------------------------------+-----------------------------------------|
| 古典プランニングState-of-the-Art Fast Downward    | [ /h/, *FIFO* (*論文には書かれてない*)] |
| /2012 Burns et. al./ がGithubで公開しているコード | [ /h/, *LIFO* (*論文には書かれてない*)] |
|                                                   | ほかも大抵書いてない                    |
|---------------------------------------------------+-----------------------------------------|

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
+ そんな細かいこと (第二段階) は *書くほどのことでもない?*

  (下界関数の改善やA*自体の拡張など他に注目しがち)
#+END_LARGER
#+END_ALIGNRIGHT


#+BEGIN_RESUME
However, h-based tiebreaking has a severe problem that it is still underspecified.
What happens if there are still multiple nodes with the same h?
There should be some further tiebreaking criteria which selects exactly one node among them.
In most papers, this kind of detail is not mentioned at all.

We found that the implementation by burns et. al. uses h-based tiebreaking followed by LIFO tiebreaking,
and the current fast downward uses h-based tiebreaking followed by FIFO tiebreaking.
Both of these are not specified in the paper.
In other words, these details are not considered important.
#+END_RESUME

* でも実際は、 タイブレーク法は /超重要/

#+BEGIN_LARGER
#+BEGIN_CENTER
*探索時間のほとんどは* */タイブレークに費やされる/.*
#+END_CENTER
#+END_LARGER

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
[[png:without-h-nokey]]
#+END_SPAN6
#+BEGIN_SPAN6

←標準ベンチマーク問題集では、

#+BEGIN_LARGER
#+BEGIN_CENTER
*探索空間中 ほとんどの*

*ノードが f=f^**.

( *Final Plateau* と呼ぶ。
小さい順に探索して最後だから)
#+END_CENTER

　

#+BEGIN_CENTER
*A*の挙動のほとんどは*

*実はタイブレークだけによって決まる。*
#+END_CENTER
#+END_LARGER
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_RESUME
However, tiebreaking is actually quite important.
We plotted the number of nodes whose f value is equal to f*,
versus those with f value less than equal to f*,

In this figure, we can see that the most nodes have the f value equal to f*.
We call these nodes as the final plateau.

The final plateau is where the optimal solutions exist.
And where all nodes have the same f-value.

Thus, in this plateau,
the search is controlled solely by the tiebreaking.
#+END_RESUME

* 第二段階のタイブレークが重要か調べてみた

| <c>                           | <c>                                     | <c>       |
| Tiebreaking                   | 説明                                    | Solved    |
| ［criterion_1, criterion_2 ］ |                                         | Instances |
|-------------------------------+-----------------------------------------+-----------|
| ［ /h/,  *LIFO* ］            | 同じ /*f_{min}*/ → 最小の /*h*/ を選ぶ |           |
|                               | 同じ /*h_{min}*/ → *LIFO* で選ぶ       |           |
|-------------------------------+-----------------------------------------+-----------|
| ［ /h/,  *FIFO* ］            | *Fast Downwardの標準設定*               |           |
|-------------------------------+-----------------------------------------+-----------|

#+BEGIN_ALIGNRIGHT
1104題の IPC (International Planning Competition) ベンチマーク問題集

30min, 2GB の資源制限 ヒューリスティック関数は Landmark-Cut (Helmert2008)

 Fast Downward : State-of-the-Art 探索ソルバの名前

　

　

#+END_ALIGNRIGHT

#+BEGIN_RESUME
To further investigate the importance of tiebreaking behavior, we tested
two commonly used tiebreaking strategies, namely h-LIFO and h-FIFO.
h-fifo is the default setting of Fast Downward.

Each criterion is applied in a dictionary order.
For example, [h,fifo] means that,
if there are multiple nodes have the same f value, it selects the smallest h.
If there are still multiple nodes have the same h value, it breaks ties according to FIFO.

We tested these strategies on IPC instances.
#+END_RESUME

* 第二段階のタイブレークが重要か調べてみた → 重要だった!

| <c>                           | <c>                                     | <c>       |
| Tiebreaking                   | 説明                                    | Solved    |
| ［criterion_1, criterion_2 ］ |                                         | Instances |
|-------------------------------+-----------------------------------------+-----------|
| ［ /h/,  *LIFO* ］            | 同じ /*f_{min}*/ → 最小の /*h*/ を選ぶ | *565*     |
|                               | 同じ /*h_{min}*/ → *LIFO* で選ぶ       |           |
|-------------------------------+-----------------------------------------+-----------|
| ［ /h/,  *FIFO* ］            | *Fast Downwardの標準設定*               | 558       |
|-------------------------------+-----------------------------------------+-----------|

#+BEGIN_ALIGNRIGHT
1104題の IPC (International Planning Competition) ベンチマーク問題集

30min, 2GB の資源制限 ヒューリスティック関数は Landmark-Cut (Helmert2008)

 Fast Downward : State-of-the-Art 探索ソルバの名前

#+BEGIN_LARGER
*［h, LIFO ］ は ［h, FIFO ］ より速い*
#+END_LARGER

*第二タイブレークは重要!*
#+END_ALIGNRIGHT

#+BEGIN_RESUME
The result showed that ［h, LIFO ］ outperforms ［h, FIFO ］.  This is a
surprising result, considering that only the 2nd tiebreaking
difference caused such a difference.
#+END_RESUME

* TODO [h,FIFO] と [h,LIFO] をドメイン (問題セット) ごとに比較

#+BEGIN_CENTER
( 1104題 = (35の問題セット) × (20〜50問) )
#+END_CENTER

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
[[png:lifo-vs-fifo]]
#+END_SPAN6
#+BEGIN_SPAN6

#+BEGIN_CENTER
違いが出たドメインは

#+BEGIN_LARGER
*Openstacks* & *Cybersec*
#+END_LARGER

*LIFO は FIFO より 10 倍速い*

(他のドメインでは凡そ同じ)

　

　

補足:

( /*h*/ なし→どのドメインでもLIFOの圧勝)
#+END_CENTER
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_RESUME
what is the reason behind this?  From the domain-wise investigation, we
found that this is caused mainly by the Cybersec and Openstacks domains.

We plotted the number of evaluations by each strategy in x-y plot. As we
see, their difference is small in most domains except Openstacks
and Cybersec.
#+END_RESUME

* /Openstacks/ & /Cybersec/ は何が特別なのか?

他と違い、多くの *ゼロコスト エッジ* が含まれる

#+BEGIN_SMALLER
ゼロコストエッジがあることによって
#+END_SMALLER

*実問題に近い* 、特定の評価関数を最小化するモデルになっている

+ *輸送・配達問題* を *燃料を最小化する* ようにモデル化
  #+BEGIN_ALIGNRIGHT
  「運転」アクション以外は *ゼロコスト* (例: 荷物の受け渡しに燃料は必要ない)
  #+END_ALIGNRIGHT
+ *Openstacks は OR分野の問題* (Fink and Voss, 1999)
  #+BEGIN_ALIGNRIGHT
  用いる *stack* の数を最小化、 *stack* を使わない行為はゼロコスト
  #+END_ALIGNRIGHT
+ *Cybersec(urity) も実問題由来* (BAMS システム, Boddy et. al. 2005)
  #+BEGIN_ALIGNRIGHT
  企業ネットワークを自動攻撃する検証システム, 必要なパスワード解析の回数を最小化
  #+END_ALIGNRIGHT

#+BEGIN_RESUME
These domains are characteristic by its large number of zero-cost actions.

Addressing the problem caused by zero-cost actions is important because it
frequently appears in practial application domains.

First of all, both of these domains originates from industrial applications.
Openstacks originates from Operations Resarch.
Regarding Cybersec, I hope the listeners remember the great talk by jorg hoffman in the last ICAPS.

Another interesting example is a realistic transportation domain with fuel optimization.
In such as setting, the domain will assign 0 to all action costs except drive-truck.
#+END_RESUME

* TODO ゼロコストがあると /*h*/ によるタイブレークが働かない

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
[[png:with-h-nokey]]
#+END_SPAN6
#+BEGIN_SPAN6

#+BEGIN_CENTER
← 前回の絵より狭い定義の *final plateau* : *f=f^**, *h=0*

*Openstacks* と *Cybersec* では

ほぼ全てのノードが *h=0*.

#+BEGIN_LARGER
*⇒ /h/-タイブレーキングは*

*全く効果がない*
#+END_LARGER

#+BEGIN_LARGER
*⇒探索は /第二タイブレーク法/*

*/LIFO or FIFO だけが支配/*
#+END_LARGER
#+END_CENTER
#+END_SPAN6
#+END_ROW-FLUID
#+END_CONTAINER-FLUID

#+BEGIN_ALIGNRIGHT
*LIFOを上回る性能を達成するためには*, もう一段踏み込んだ分析が必要。
#+END_ALIGNRIGHT

#+BEGIN_RESUME
Well, I didn't explained exaclty why these zero-cost made the difference.

These domains are unfriendly to h-based tiebreaking. This is a plot of the final plateau, with differnt definition.
This time, not only f is equal to f*, but also h should be equal to 0.

In openstacs and cybersec, almost all nodes are on the x-y line.
In other words, at almsot all search nodes, h=0.
In these domains, h-tiebreaking has almost no effect.

Thus, to improve upon LIFO, we should understand Final Plateau.
#+END_RESUME

# , and the LIFO and FIFO plays the primary role. 

* Final Plateau の分析

[[png:final-plateau0]]

#+BEGIN_RESUME
First of all, this is the traditional understanding of the search space of
A*. However, this is actually not the case, because
#+END_RESUME

* Final Plateau の分析

[[png:final-plateau]]

#+BEGIN_RESUME
in fact, most nodes are in the large final plateau.
This is the same whether it is positive or zero-cost.
Without proper tiebreaking strategy, the planner has no guidance,
because any heuristic estimates are the same almost everywhere.
#+END_RESUME

* Final Plateau の分析

*/常に コスト ＞ ０/ なドメインに限れば、*

[[png:final-plateau2]]

#+BEGIN_RESUME
In positive-cost domains, the h-based tiebreaking is useful because it provides a gradient toward the goal.
#+END_RESUME

* ほぼ全ての辺がゼロコストだと...

[[png:final-plateau3]]

#+BEGIN_RESUME
However, in zero-cost domains, almost all h values are 0, and h-based tiebreaking is useless.
The problem is, how can we give a useful guidance in such a region?
#+END_RESUME

* Final Plateau の中の Depth (深さ)

[[png:final-plateau4]]

初期ノードからの深さとは異なる

#+BEGIN_RESUME
Here, we propose a depth-based tiebreaking.

Depth characterises a number of steps from the entrance of the plateau.

If the parent of a node have the different f and h value, then the child is
a plateau entrance, and its depth is 0.

If the parent of a node have the same f and h value, then the child has a depth larger by one.
#+END_RESUME

* 深さをどう使う?

Final Plateau f=f^* では, *どのゴールもコスト最適* で、深さは関係ない

#+BEGIN_ALIGNRIGHT
なぜなら *どの辺もゼロコストだから.*
#+END_ALIGNRIGHT

[[png:final-plateau4-2]]

#+BEGIN_ALIGNRIGHT
#+BEGIN_LARGER
従って *探索する時に深さに偏りがあるのは良くない.*
#+END_LARGER
#+END_ALIGNRIGHT

** 例: 常に浅いところから探索するのは良くない

# /FirstDepth/ tiebreaking strategy : ［ h, /fd/ ］

[[png:final-plateau5]]

#+BEGIN_RESUME
For example, what happens if we always prefer the smallest depth?
We call such a stratefy First Depth.
FirstDepth behaves like a breadth-first search and FIFO tiebreaking, which did not perform well.

FirstDepth tends to search the neighborhood of plateau entrance exhaustively,
and takes too much time to reach the appropriate depth.
#+END_RESUME

** 例: 常に深いところから探索するのも良くない

# /LastDepth/ tiebreaking strategy :  ［ h, /ld/ ］

[[png:final-plateau6]]

#+BEGIN_RESUME
The opposite scheme, LastDepth, also have a problem.  Last depth, which
always selects the largest depth, is in certain condition equivalent to
depth-first LIFO tiebreaking.
It may quickly pass and miss the important depth.
#+END_RESUME


* Random Depth Tiebreaking

[[png:final-plateau7]]

# #+BEGIN_ALIGNRIGHT
# Classic Exploration vs Exploitation problem
# 
# Connections to Rapidly exploring Random Tree (RRT) ?
# #+END_ALIGNRIGHT

#+BEGIN_RESUME
Finally, we propose RandomDepth tiebreaking which removes the depth bias.
Actual implementation of RandomDepth is as follows.

When h-tiebreaking fails, RandomDepth selects a random depth.

Then a Random Order selects one node at random.

RandomDepth Tiebreaking can search the final plateau uniformly and sparsely.
This is an interesting aspect similar to Rapidly exploring Random Tree.
#+END_RESUME

# * Random Depth Tiebreaking + random selection within depth
# 
# third tiebreaking: not FIFO, not LIFO, but RandomOrder : RO
# 
# ［ h, /rd/, RO ］
# 
# [[png:final-plateau7]]

* 評価 (用いた問題集)

+ IPC^1 問題集 (1104 instances)
+ *Zero-cost* 問題集 (620 instances, 28 domains)
  + IPC^1 を *資源消費最適化問題* 改変したもの。例:
    + Woodworking ドメイン: 元問題:最短工程を探索→ 木材消費の最適化
    + Driverslog (運送ドメイン): 最短工程 → 燃料消費の最適化
    + etc..

#+BEGIN_NOTE
1 -- IPC : International Planning Competition
#+END_NOTE

#+BEGIN_RESUME
Finally, the experimental evaluation.  Along with the original IPC
instances, we introduce Zero-cost domains, which are the instances we
assigned cost 0 to all actiosn except one.

The one which has a positive cost represents a realistic key resource,
such as wood, fuel or electricity.

We created 620 zerocost instances consisting of 28 domains.
#+END_RESUME

* 評価 (用いた探索設定 (おさらい))

#+BEGIN_CONTAINER-FLUID
#+BEGIN_ROW-FLUID
#+BEGIN_SPAN6
A* with *[h, FIFO]*

/*f_{min}*/ のノードを選ぶ を満たす

*もし* 複数ノードが /*f_{min}*/ なら

/*h_{min}*/ を満たすノードを選ぶ

*もし* 複数ノードが /*h_{min}*/ なら

Select the oldest node (i.e. FIFO)
#+END_SPAN6
#+BEGIN_SPAN6
A* with *[h, LIFO]*

/*f_{min}*/ を満たすノードを選ぶ

*もし* 複数ノードが /*f_{min}*/ なら

/*h_{min}*/ を満たすノードを選ぶ

*もし* 複数ノードが /*h_{min}*/ なら

Select the newest node (i.e. LIFO)
#+END_SPAN6
#+END_ROW-FLUID

-----------

#+BEGIN_ROW-FLUID
#+BEGIN_SPAN1

#+END_SPAN1
#+BEGIN_SPAN10
A* with *[h, RD, RO]*,

/*f_{min}*/ を満たすノードを選ぶ

*もし* 複数ノードが /*f_{min}*/ なら, /*h_{min}*/ のノードを選ぶ

*もし* 複数ノードが /*h_{min}*/ なら, ランダムに深さ /d/ を選ぶ

*もし* 複数ノードが /d/ にいるなら, そのなかからランダムにノードを選ぶ
#+END_SPAN10
#+BEGIN_SPAN1

#+END_SPAN1
#+END_ROW-FLUID
#+END_CONTAINER-FLUID


#+BEGIN_RESUME
Now lets review the participants.  [h, FIFO] is a conventional
tiebreaking strategy which first break ties according to h, When there are
multiple nodes with the same h, it then breaks ties accoding to the FIFO
order, in other words expanding the oldest node.

[h, LIFO] is another conventional tiebreaking strategy which also uses
h-tiebreaking, but when there are multiple nodes with the same h,
it expands in LIFO order, or expanding the most recently generated node first.

Finally, [h, RD, RO] is our proposed method. It also uses the h-based
tiebreaking.  However, when multiple nodes have the same h, it puts them
into several buckets according to the depth d, then select a bucket at
random. From the selected bucket, it selects a node at random.
#+END_RESUME

* 評価 (制限時間内に解けた問題の数)

#+BEGIN_SMALLER
LMcut, Merge-and-Shrink(M&S) : state-of-the-art ヒューリスティック関数

［h, RD, RO］ は 10回の平均
#+END_SMALLER

| /                       | <            | >           | <>                |
|                         | <c>          | <c>         | <c>               |
|                         | ［h, FIFO］  | ［h, LIFO］ | ［h, RD, RO］     |
| Domain Set              | (FD Default) |             | (Proposed)        |
|-------------------------+--------------+-------------+-------------------|
| LMcut                   |              |             |                   |
| IPC Instances (1104)    |              |             |                   |
| Zerocost Instances(680) |              |             |                   |
| Sum(1724)               |              |             |                   |
|-------------------------+--------------+-------------+-------------------|
| M&S                     |              |             |                   |
| IPC Instances (1104)    |              |             |                   |
| Zerocost Instances(680) |              |             |                   |
| Sum(1724)               |              |             |                   |
|-------------------------+--------------+-------------+-------------------|

#+BEGIN_RESUME
We tested these tiebreakings with a standard competition setting of 30 min,
2GB memory.  We used both the LMcut heuristics and Merge-and-Shrink
heuristics, which are both the state-of-the-arts but
whose values are computed in a completely different manner.
#+END_RESUME

* 評価 (制限時間内に解けた問題の数)

#+BEGIN_SMALLER
LMcut, Merge-and-Shrink(M&S) : state-of-the-art ヒューリスティック関数

［h, RD, RO］ は 10回の平均
#+END_SMALLER

| /                       | <            | >           | <>                |
|                         | <c>          | <c>         | <c>               |
|                         | ［h, FIFO］  | ［h, LIFO］ | ［h, RD, RO］     |
| Domain Set              | (FD Default) |             | (Proposed)        |
|-------------------------+--------------+-------------+-------------------|
| LMcut                   |              |             |                   |
| IPC Instances (1104)    | 558          | 565         | *572.8* (↑ 14.8) |
| Zerocost Instances(680) | 256          | 279         | *294.2* (↑ 38.2) |
| Sum(1724)               | 814          | 844         | *867.0* (↑ 53.0) |
|-------------------------+--------------+-------------+-------------------|
| M&S                     |              |             |                   |
| IPC Instances (1104)    | 479          | *488*       | 484.0 (↑ 5.0)    |
| Zerocost Instances(680) | 276          | 290         | *310.2* (↑ 34.2) |
| Sum(1724)               | 755          | 778         | *794.2* (↑ 39.2) |
|-------------------------+--------------+-------------+-------------------|

#+BEGIN_ALIGNRIGHT
*［h, RD, RO］ は [h,FIFO] と [h,LIFO] より圧倒的に良い!*
#+END_ALIGNRIGHT

#+BEGIN_RESUME
And this is the result. We achieved a
significant improvement both in the IPC instances and in Zerocost instances.
#+END_RESUME

* Woodworking問題での深さの分布



#+BEGIN_CENTER
  
[[png:depth-distribution0]]

#+END_CENTER

#+BEGIN_RESUME
Next, in order to see our plateau theory actually holds,
we plotted the number of nodes in each depth.
#+END_RESUME

* Woodworking問題での深さの分布



#+BEGIN_CENTER
  
[[png:depth-distribution1]]

#+END_CENTER

#+BEGIN_RESUME
Now we can first see FIFO is too biased toward the shallower region.
#+END_RESUME

* Woodworking問題での深さの分布



#+BEGIN_CENTER
  
[[png:depth-distribution2]]

#+END_CENTER

#+BEGIN_RESUME
And LIFO is too biased toward the deeper region.
#+END_RESUME

* Woodworking問題での深さの分布



#+BEGIN_CENTER
  
[[png:depth-distribution3]]

#+END_CENTER

#+BEGIN_RESUME
In contrast the distribution of RandomDepth draws a beautiful curve,
showing that it distributes its effort among different depths.
#+END_RESUME

* まとめ (論文の貢献内容)

+ *そもそものタイブレーキングのきちんとした定量的評価*
  + 論文にはさらに詳細な実験結果あり
+ *乱択深さタイブレーキング(RandomDepth Tiebreaking)*
  + *h-based Tiebreaking* では不十分
+ *Final Plateauを詳細に分析*
  + *深さに偏りがあるのは良くない*

* Future Work -- Connections to the Other Areas

+ It would be applicable to Bidi search (*Award Talk*)
+ Satisficing Search ( cf. *Yesterday talk by Richard Valenzano* )
  + Use *ｆ／５* -- most actions become 0 cost
    + looks like constant-error search (/＜ｆ^*+5/) unlike WA* : /＜w×ｆ^*/ 
+ Temporal Planning/Scheduling
  + Short actions do not increase the makespan = 0-cost actions?
+ Can we make the exploration more efficient?
  + *RRTs* (Rapidly exploring Random Trees) + diversity metric
  + *MCTS* (Monte Carlo Tree Search w/ Upper Confidence Bound)
+ "Plan Diversity is underinvestigated" --- Jorg Hoffman
  + Exploration-based approach might also be underinvestigated?

#+BEGIN_CENTER
Thanks for your attention!
#+END_CENTER

* Appendix

+ Is randomness necessary? How about just round-robin loop?
  + I consider it is possible but not tested yet.
+ Relationship to LA^*_0 and LAMA's PLUSONE cost type? (lookahead)
  + LA^*_0 is equivalent to FIFO, the smallest depth.
  + PLUSONE is FIFO, and is inadmissible.
+ Little disadvantage in positive-cost domains (depth is always 0)
  + except: slows down expansion rate in M&S
    + M&S eval is table lookup and quite fast

